#!/usr/bin/env python3
'''PySplicer 2: A pure-python codon optimisation engine using weighted-random selection with targeted pattern exclusion.
by Cathal Garvey
Released under the GNU Affero General Public License

'''
from pysplicer import main_utils
#from pysplicer import DNAMapper
#from pysplicer import translators
#from pysplicer import CodonSplicer
#from pysplicer import CodonJuggler
#from pysplicer import sequtils
#from pysplicer import builtin_frequency_tables
# Won't work unless Vienna package is installed to path but importing does no harm:
#from pysplicer import RNAfoldWrap

import argparse
import sys
#import json

ArgP = argparse.ArgumentParser(
    description=("A pure-python3 codon optimisation engine using weighted-random"
                 " selection with targeted pattern exclusion and basic secondary structure avoidance."),
    epilog="by Cathal Garvey\nReleased under the GNU Affero General Public License.")
ArgP.add_argument("-i", "--input-sequence", type=argparse.FileType('r'),default=sys.stdin,
        help="Amino acid containing file to process. Defaults to standard input.")
        
ArgP.add_argument("-e","--exclude",nargs="+",default=[],
        help="IUPAC DNA patterns to (attempt to) exclude from output.")

ArgP.add_argument("-E","--exclude-enzymes",nargs="+",
        help="Names of restriction enzymes to (attempt to) exclude from output.")

ArgP.add_argument("-r","--output-rna",action="store_true",
        help="Output RNA rather than DNA after processing.")

ArgP.add_argument("--exclude-file",type=argparse.FileType('r'),
        help="A file containing additional IUPAC DNA patterns to exclude, one per line.")
        
ArgP.add_argument("-M","--max-early-codon-frequency",type=float,default=0.7,
        help="Frequency cap above which early codons should be excluded.")

ArgP.add_argument("-m","--min-codon-frequency",type=float,default=0.025,
        help="Frequency value (between 0 and 1) below which codons should be excluded from output.")

ArgP.add_argument("-v","--verbose",action="store_true",default=False,
        help="Output (lots) of internal processing data. Optimisation will be slower with this option.")

ArgP.add_argument("-s","--species",default="ecoli_optimal",
        help="Name of species table to use, e.g. 'ecoli_optimal'.")

ArgP.add_argument("-T","--table",
        help="Filename of a JSON-formatted frequency table to use.")

ArgP.add_argument("--avoid-ngg-span",type=int,default=15,
        help="Number of leading codons in which to avoid NGG codons, default 15.")
        
ArgP.add_argument("--enrich-adenine", action="store_true", default=False,
        help="As a crude way to help avoid early secondary structures, favour adenine-rich early codons.")

ArgP.add_argument("--ignore-structure",action="store_true", default=False,
        help="Skip searching for and correcting minor secondary structures (a very time-consuming operation)")
        
ArgP.add_argument("--use-vienna", action="store_true", default=True,
        help="If the ViennaRNA software suite is found, use that instead of the crude inbuilt hairpin mapper.")

ArgP.add_argument("--max-early-free-energy", type=float, default=6,
        help="If using ViennaRNA, this is the maximum free energy allowable for the first several codons (as specified in avoid-ngg-span option).")

ArgP.add_argument("--heatmap",action="store_true",default=False,
        help="Print frequencies of relative codon use for each codon at end.")

ArgP.add_argument("--candidates",type=int,default=200,
        help="Number of splice candidates to generate during each round of splicing. Default is 200.")

ArgP.add_argument("--fasta-title",type=str,
        help="Output as a FASTA block with this title.")

ArgP.add_argument("-w","--wrap",type=int,default = 50,
        help="Wrap output sequence to this many characters per line.")

args = ArgP.parse_args()

try:
    main_utils.main(args)
except KeyboardInterrupt:
    print("Caught Ctrl-C, quitting")
